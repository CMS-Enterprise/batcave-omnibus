name: Build Omnibus
run-name: Building Omnibus Applications
on:
  push:
    branches:
      - main
      - feat/*
    tags:
      - "*"
  pull_request:
    branches:
      - main

env:
  TEMPLATE_VERSION: "main"
  FETCH_SAST_ARTIFACTS: "false"

jobs:
  # delivery-pipeline
  #
  # build the omnibus image with commit tag.
  # will only run when it's NOT a commit tag branch
  # delivery-pipeline:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: artifactory.cloud.cms.gov/batcave-docker/devops-pipelines/pipeline-tools/podman:v4.4.1-1
  #     credentials:
  #       username: ${{ secrets.BC_ARTIFACTORY_USERNAME }}
  #       password: ${{ secrets.BC_ARTIFACTORY_AUTH }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     # TODO: Call delivery-pipeline in pipeline triggers
  #     - name: Build the omnibus image with commit tag
  #       run: |
  #         echo "PUSH_LATEST=true" >> $GITHUB_ENV
  #         mkdir ~/.docker && echo ${{ secrets.BC_ARTIFACTORY_AUTH_JSON }} >> ~/.docker/config.json
  #         podman version

  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: string
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}
      - name: Convert repository name to lowercase
        run: |
          echo "REPO_NAME=${{ steps.string.outputs.lowercase }}" >> $GITHUB_ENV
      - name: Branch name
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
      - name: Set up the environment
        run: |
          echo "SOURCE_TAG=$SOURCE_TAG" >> $GITHUB_ENV
          echo "IMAGE_NAME=ghcr.io/${{ env.REPO_NAME }}:${{ env.SOURCE_TAG }}" >> $GITHUB_ENV
      - name: Build Image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}
      - name: Test
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}
      - name: Push Image if tag
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGE_NAME }}
      - name: Inspect
        run: |
          docker image inspect ${{ env.IMAGE_NAME }}

  grype:
    needs: build-and-push
    runs-on: ubuntu-latest
    # TODO: Fix syntax on the following
    # if: !(${{ github.event_name }} == "merge_request_event") || always() || !(${{ github.ref }}) || always()
    env:
      BC_IMAGE_REPO: ${{ secrets.BC_ARTIFACTORY_URL }}/batcave-docker
      APP_IMAGE_TAG: ${{ github.sha }}
      APP_IMAGE_SRC: ${{ vars.BC_IMAGE_REPO }}/${{ github.repository }}
      # APP_IMAGE: ${{ vars.BC_IMAGE_REPO }}/${{ github.repository }}:${{ github.sha }}
      APP_IMAGE: ${APP_IMAGE_SRC}:${{ github.sha }}
      ARTIFACT_FOLDER: ".artifacts"
      GITLEAKS_REPORT: ${ARTIFACT_FOLDER}/gitleaks/gitleaks_report.json
      IMAGE_SBOM: ${ARTIFACT_FOLDER}/sbom/sbom.json
      COSIGN_EXPERIMENTAL: 1
      GRYPE_CACHE_IMAGE: "${{ vars.BC_IMAGE_REPO }}/devops-pipelines/cache/grype/vulndb:latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Test Grype
        run: |
          echo "APP_IMAGE=${{ env.APP_IMAGE }}"
          echo "BC_IMAGE_REPO=${{ env.BC_IMAGE_REPO }}"
      # - run: oras pull ${GRYPE_CACHE_IMAGE}
      # - run: grype db import vulndb.tar.gz
      # - run: grype db check
      # - run: grype artifactory.cloud.cms.gov/docker/bkimminich/juice-shop -o json --file report.json
      # - run: cat report.json | jq .

  # _with-omnibus:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: artifactory.cloud.cms.gov/batcave-docker/devops-pipelines/pipeline-tools/omnibus:v1.0.0

  # release-pipeline
  #
  # create a release when there is a git tag pushed to this repo
  # release-pipeline:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Create a release when there is a git tag pushed to this repo
  #       run: |
  #         # TODO: Call release-pipeline in pipeline triggers

  # release-gitlab
  #
  # creates a release package for GitLab UI
  # release-gitlab:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Creates a release package for GitLab UI
  #       run: |
  #         echo "Release to GitLab..."
  #         # TODO: Call release-gitlab in pipeline triggers

  # _with-current-image:
  #   # needs: delivery-pipeline
  #   # TODO: Invert the following condition:
  #   # if the current branch is not a tag, then run the pipeline
  #   # if: startsWith(github.ref, 'refs/tags/v')
  #   runs-on: ubuntu-latest
  #   container:
  #     # image: "${APP_IMAGE}"
  #     image: ${{ vars.BC_IMAGE_REPO }}/${{ github.repository }}:${{ github.sha }}
  #   env:
  #     BC_IMAGE_REPO: ${{ secrets.BC_ARTIFACTORY_URL }}/batcave-docker
  #     APP_IMAGE_TAG: ${{ github.sha }}
  #     APP_IMAGE_SRC: ${{ vars.BC_IMAGE_REPO }}/${{ github.repository }}
  #     # APP_IMAGE: ${{ vars.BC_IMAGE_REPO }}/${{ github.repository }}:${{ github.sha }}
  #     APP_IMAGE: ${APP_IMAGE_SRC}:${{ github.sha }}
  #     ARTIFACT_FOLDER: ".artifacts"
  #     GITLEAKS_REPORT: ${ARTIFACT_FOLDER}/gitleaks/gitleaks_report.json
  #     IMAGE_SBOM: ${ARTIFACT_FOLDER}/sbom/sbom.json
  #     COSIGN_EXPERIMENTAL: 1
  #   steps:
  #     - id: string
  #       uses: ASzc/change-string-case-action@v5
  #       with:
  #         string: ${{ github.repository }}

  #     - name: Concatenate values to environment file
  #       run: |
  #         echo "APP_IMAGE=${{env.BC_IMAGE_REPO}}/${{ steps.string.outputs.lowercase }}:${{ github.sha }}"
  #         echo "APP_IMAGE=${{env.BC_IMAGE_REPO}}/${{ steps.string.outputs.lowercase }}:${{ github.sha }}" >> $GITHUB_ENV

  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Setup Docker
  #       run: |
  #         mkdir ~/.docker && echo ${{ secrets.BC_ARTIFACTORY_AUTH_JSON }} >> ~/.docker/config.json
  #         run: echo 'BC_IMAGE_REPO: ${{ env.BC_IMAGE_REPO }}'

  # - name: Run Grype
  #   run: |
  #     # Add your Grype commands here

  # - name: Run Syft
  #   run: |
  #     # Add your Syft commands here

  # - name: Run Gitleaks
  #   run: |
  #     # Add your Gitleaks commands here

  # - name: Run Cosign and Crane
  #   run: |
  #     # Add your Cosign and Crane commands here

  # - name: Run Gatecheck
  #   run: |
  #     # Add your Gatecheck commands here

  # - name: Run S3upload
  #   run: |
  #     # Add your S3upload commands here

  # - name: Run Oras
  #   run: |
  #     # Add your Oras commands here

  # - name: Run Workflow Engine
  #   run: |
  #     # Add your Workflow Engine commands here

  # - name: Run Release Tool
  #   run: |
  #     # Add your Release Tool commands here

  # grype:
  #   needs: _with-current-image
  #   runs-on: ubuntu-latest
  #   # TODO: Fix syntax on the following
  #   # if: !(${{ github.event_name }} == "merge_request_event") || always() || !(${{ github.ref }}) || always()
  #   env:
  #     GRYPE_CACHE_IMAGE: "${BC_IMAGE_REPO}/devops-pipelines/cache/grype/vulndb:latest"
  #   steps:
  #     - uses: actions/checkout@v4.1.0
  #     - run: oras pull ${GRYPE_CACHE_IMAGE}
  #     - run: grype db import vulndb.tar.gz
  #     - run: grype db check
  #     - run: grype artifactory.cloud.cms.gov/docker/bkimminich/juice-shop -o json --file report.json
  #     - run: cat report.json | jq .

  # syft:
  #   needs: delivery-pipeline
  #   runs-on: ubuntu-latest
  #   container:
  #     image: "${APP_IMAGE}"
  #   if: !(${{ github.event_name }} == "merge_request_event") || always() || !(${{ github.ref }}) || always()
  #   env:
  #     TEMPLATE_VERSION: main
  #     FETCH_SAST_ARTIFACTS: 'false'
  #     APP_IMAGE_TAG: "${{ github.sha }}"
  #     APP_IMAGE_SRC: "${BC_IMAGE_REPO}/${{ github.repository }}"
  #     APP_IMAGE: "${APP_IMAGE_SRC}:${APP_IMAGE_TAG}"
  #     ARTIFACT_FOLDER: ".artifacts"
  #     GITLEAKS_REPORT: "${ARTIFACT_FOLDER}/gitleaks/gitleaks_report.json"
  #     IMAGE_SBOM: "${ARTIFACT_FOLDER}/sbom/sbom.json"
  #     COSIGN_EXPERIMENTAL: 1
  #   steps:
  #   - uses: actions/checkout@v4.1.0
  #   - run: mkdir ~/.docker && echo $BC_ARTIFACTORY_AUTH_JSON >> ~/.docker/config.json
  #   - run: syft version
  #   - run: syft artifactory.cloud.cms.gov/docker/bkimminich/juice-shop --scope=squashed -o json --file ${IMAGE_SBOM}
  #   - run: cat ${IMAGE_SBOM}
  # gitleaks:
  #   needs: delivery-pipeline
  #   runs-on: ubuntu-latest
  #   container:
  #     image: "${APP_IMAGE}"
  #   if: !(${{ github.event_name }} == "merge_request_event") || always() || !(${{ github.ref }}) || always()
  #   env:
  #     TEMPLATE_VERSION: main
  #     FETCH_SAST_ARTIFACTS: 'false'
  #     APP_IMAGE_TAG: "${{ github.sha }}"
  #     APP_IMAGE_SRC: "${BC_IMAGE_REPO}/${{ github.repository }}"
  #     APP_IMAGE: "${APP_IMAGE_SRC}:${APP_IMAGE_TAG}"
  #     ARTIFACT_FOLDER: ".artifacts"
  #     GITLEAKS_REPORT: "${ARTIFACT_FOLDER}/gitleaks/gitleaks_report.json"
  #     IMAGE_SBOM: "${ARTIFACT_FOLDER}/sbom/sbom.json"
  #     COSIGN_EXPERIMENTAL: 1
  #   steps:
  #   - uses: actions/checkout@v4.1.0
  #   - run: mkdir ~/.docker && echo $BC_ARTIFACTORY_AUTH_JSON >> ~/.docker/config.json
  #   - run: git config --global --add safe.directory '*'
  #   - run: git clone https://github.com/juice-shop/juice-shop.git
  #   - run: mkdir -p $ARTIFACT_FOLDER/gitleaks
  #   - run: touch ${GITLEAKS_REPORT}
  #   - run: echo "Starting Gitleaks Secrets Scan"
  #   - run: gitleaks detect --exit-code 0 --verbose --source juice-shop --report-format json --report-path ${GITLEAKS_REPORT}
  # cosign-crane:
  #   needs: delivery-pipeline
  #   runs-on: ubuntu-latest
  #   container:
  #     image: "${APP_IMAGE}"
  #   if: !(${{ github.event_name }} == "merge_request_event") || always() || !(${{ github.ref }}) || always()
  #   env:
  #     TEMPLATE_VERSION: main
  #     FETCH_SAST_ARTIFACTS: 'false'
  #     APP_IMAGE_TAG: "${{ github.sha }}"
  #     APP_IMAGE_SRC: "${BC_IMAGE_REPO}/${{ github.repository }}"
  #     APP_IMAGE: "${APP_IMAGE_SRC}:${APP_IMAGE_TAG}"
  #     ARTIFACT_FOLDER: ".artifacts"
  #     GITLEAKS_REPORT: "${ARTIFACT_FOLDER}/gitleaks/gitleaks_report.json"
  #     IMAGE_SBOM: "${ARTIFACT_FOLDER}/sbom/sbom.json"
  #     COSIGN_EXPERIMENTAL: 1
  #   steps:
  #   - uses: actions/checkout@v4.1.0
  #   - run: mkdir ~/.docker && echo $BC_ARTIFACTORY_AUTH_JSON >> ~/.docker/config.json
  #   - run: cosign version
  #   - run: crane version
  #   - run: export TARGET_IMAGE=$(crane digest --full-ref ${APP_IMAGE})
  #   - run: echo "Application Image Digest -> ${TARGET_IMAGE}"
  #   - run: echo "Signing image using cosign with OIDC token"
  #   - run: cosign sign --identity-token=$(cat /var/run/secrets/eks.amazonaws.com/serviceaccount/token) ${TARGET_IMAGE}
  # gatecheck:
  #   needs: delivery-pipeline
  #   runs-on: ubuntu-latest
  #   container:
  #     image: "${APP_IMAGE}"
  #   if: !(${{ github.event_name }} == "merge_request_event") || always() || !(${{ github.ref }}) || always()
  #   env:
  #     TEMPLATE_VERSION: main
  #     FETCH_SAST_ARTIFACTS: 'false'
  #     APP_IMAGE_TAG: "${{ github.sha }}"
  #     APP_IMAGE_SRC: "${BC_IMAGE_REPO}/${{ github.repository }}"
  #     APP_IMAGE: "${APP_IMAGE_SRC}:${APP_IMAGE_TAG}"
  #     ARTIFACT_FOLDER: ".artifacts"
  #     GITLEAKS_REPORT: "${ARTIFACT_FOLDER}/gitleaks/gitleaks_report.json"
  #     IMAGE_SBOM: "${ARTIFACT_FOLDER}/sbom/sbom.json"
  #     COSIGN_EXPERIMENTAL: 1
  #   steps:
  #   - uses: actions/checkout@v4.1.0
  #   - run: mkdir ~/.docker && echo $BC_ARTIFACTORY_AUTH_JSON >> ~/.docker/config.json
  #   - run: gatecheck version
  #   - run: gatecheck config info
  # s3upload:
  #   needs: delivery-pipeline
  #   runs-on: ubuntu-latest
  #   container:
  #     image: "${APP_IMAGE}"
  #   if: !(${{ github.event_name }} == "merge_request_event") || always() || !(${{ github.ref }}) || always()
  #   env:
  #     TEMPLATE_VERSION: main
  #     FETCH_SAST_ARTIFACTS: 'false'
  #     APP_IMAGE_TAG: "${{ github.sha }}"
  #     APP_IMAGE_SRC: "${BC_IMAGE_REPO}/${{ github.repository }}"
  #     APP_IMAGE: "${APP_IMAGE_SRC}:${APP_IMAGE_TAG}"
  #     ARTIFACT_FOLDER: ".artifacts"
  #     GITLEAKS_REPORT: "${ARTIFACT_FOLDER}/gitleaks/gitleaks_report.json"
  #     IMAGE_SBOM: "${ARTIFACT_FOLDER}/sbom/sbom.json"
  #     COSIGN_EXPERIMENTAL: 1
  #     AWS_PROFILE: "${BC_AWS_PROFILE_PROD}"
  #     AWS_BUCKET: "${BC_AWS_SECURITY_SCANS_STORAGE_BUCKET_PROD}"
  #     PRODUCT: "${{ github.event.repository.name }}"
  #     ENGAGEMENT: "${{ github.event.repository.name }}_pipeline_${{ github.repository}}/${{ github.workflow }}_${{ github.ref }}"
  #   steps:
  #   - uses: actions/checkout@v4.1.0
  #   - run: mkdir ~/.docker && echo $BC_ARTIFACTORY_AUTH_JSON >> ~/.docker/config.json
  #   - run: export PRODUCT_TYPE=$(basename ${{ github.repository_owner }})
  #   - run: export EXPORT_DATE=$(date -u +"%Y%m%d")
  #   - run: export S3_KEY=${EXPORT_DATE}/${PRODUCT_TYPE}/${PRODUCT}/${ENGAGEMENT}
  #   - run: echo "Omnibus Smoke Test - Ignore" > file-1.txt
  #   - run: ls -la
  #   - run: s3upload -f file-1.txt -b ${AWS_BUCKET} -k ${S3_KEY}
  # oras:
  #   needs: delivery-pipeline
  #   runs-on: ubuntu-latest
  #   container:
  #     image: "${APP_IMAGE}"
  #   if: !(${{ github.event_name }} == "merge_request_event") || always() || !(${{ github.ref }}) || always()
  #   env:
  #     TEMPLATE_VERSION: main
  #     FETCH_SAST_ARTIFACTS: 'false'
  #     APP_IMAGE_TAG: "${{ github.sha }}"
  #     APP_IMAGE_SRC: "${BC_IMAGE_REPO}/${{ github.repository }}"
  #     APP_IMAGE: "${APP_IMAGE_SRC}:${APP_IMAGE_TAG}"
  #     ARTIFACT_FOLDER: ".artifacts"
  #     GITLEAKS_REPORT: "${ARTIFACT_FOLDER}/gitleaks/gitleaks_report.json"
  #     IMAGE_SBOM: "${ARTIFACT_FOLDER}/sbom/sbom.json"
  #     COSIGN_EXPERIMENTAL: 1
  #     ARTIFACT_TYPE: application/vnd.cms.batcave.smoke-test+text
  #     SMOKE_TEST_IMAGE: "${BC_IMAGE_REPO}/devops-pipelines/cache/omnibus/smoke-test:latest"
  #   steps:
  #   - uses: actions/checkout@v4.1.0
  #   - run: mkdir ~/.docker && echo $BC_ARTIFACTORY_AUTH_JSON >> ~/.docker/config.json
  #   - run: date > omnibus-smoke-test.txt
  #   - run: cat omnibus-smoke-test.txt
  #   - run: oras push -v --artifact-type ${ARTIFACT_TYPE} ${SMOKE_TEST_IMAGE} omnibus-smoke-test.txt
  #   - run: rm omnibus-smoke-test.txt
  #   - run: ls -lah
  #   - run: oras pull -v ${SMOKE_TEST_IMAGE}
  #   - run: cat omnibus-smoke-test.txt
  # workflow-engine:
  #   needs: delivery-pipeline
  #   runs-on: ubuntu-latest
  #   container:
  #     image: "${APP_IMAGE}"
  #   if: !(${{ github.event_name }} == "merge_request_event") || always() || !(${{ github.ref }}) || always()
  #   env:
  #     TEMPLATE_VERSION: main
  #     FETCH_SAST_ARTIFACTS: 'false'
  #     APP_IMAGE_TAG: "${{ github.sha }}"
  #     APP_IMAGE_SRC: "${BC_IMAGE_REPO}/${{ github.repository }}"
  #     APP_IMAGE: "${APP_IMAGE_SRC}:${APP_IMAGE_TAG}"
  #     ARTIFACT_FOLDER: ".artifacts"
  #     GITLEAKS_REPORT: "${ARTIFACT_FOLDER}/gitleaks/gitleaks_report.json"
  #     IMAGE_SBOM: "${ARTIFACT_FOLDER}/sbom/sbom.json"
  #     COSIGN_EXPERIMENTAL: 1
  #     WFE_BUILD_DIR: "."
  #     WFE_BUILD_DOCKERFILE: Dockerfile
  #     WFE_BUILD_TAG: latest
  #     WFE_BUILD_PLATFORM: linux/amd64
  #     WFE_BUILD_TARGET: build
  #     WFE_BUILD_CACHE_TO: ''
  #     WFE_BUILD_CACHE_FROM: ''
  #     WFE_BUILD_SQUASH_LAYERS: 'false'
  #     WFE_SCAN_IMAGE_TARGET: ''
  #     WFE_ARTIFACT_DIRECTORY: ".artifacts"
  #     WFE_SBOM_FILENAME: sbom.json
  #     WFE_GRYPE_FILENAME: grype.json
  #   steps:
  #   - uses: actions/checkout@v4.1.0
  #   - run: mkdir ~/.docker && echo $BC_ARTIFACTORY_AUTH_JSON >> ~/.docker/config.json
  #   - run: echo "Workflow Engine Smoke Test"
  #   - run: workflow-engine run debug
  # release-tool:
  #   needs: delivery-pipeline
  #   runs-on: ubuntu-latest
  #   container:
  #     image: "${APP_IMAGE}"
  #   if: !(${{ github.event_name }} == "merge_request_event") || always() || !(${{ github.ref }}) || always()
  #   env:
  #     TEMPLATE_VERSION: main
  #     FETCH_SAST_ARTIFACTS: 'false'
  #     APP_IMAGE_TAG: "${{ github.sha }}"
  #     APP_IMAGE_SRC: "${BC_IMAGE_REPO}/${{ github.repository }}"
  #     APP_IMAGE: "${APP_IMAGE_SRC}:${APP_IMAGE_TAG}"
  #     ARTIFACT_FOLDER: ".artifacts"
  #     GITLEAKS_REPORT: "${ARTIFACT_FOLDER}/gitleaks/gitleaks_report.json"
  #     IMAGE_SBOM: "${ARTIFACT_FOLDER}/sbom/sbom.json"
  #     COSIGN_EXPERIMENTAL: 1
  #   steps:
  #   - uses: actions/checkout@v4.1.0
  #   - run: mkdir ~/.docker && echo $BC_ARTIFACTORY_AUTH_JSON >> ~/.docker/config.json
  #   - run: release-cli help
  # release-gitlab:
  #   needs:
  #   - grype
  #   - syft
  #   - gitleaks
  #   - cosign-crane
  #   - gatecheck
  #   - s3upload
  #   - oras
  #   - workflow-engine
  #   - release-tool
  #   runs-on: ubuntu-latest
  #   container:
  #     image: artifactory.cloud.cms.gov/batcave-docker/devops-pipelines/pipeline-tools/omnibus:v1.0.0-rc.10
  #   if: !(${{ github.event_name }} == "merge_request_event") || always() || ${{ github.ref }}
  #   env:
  #     TEMPLATE_VERSION: main
  #     FETCH_SAST_ARTIFACTS: 'false'
  #   steps:
  #   - uses: actions/checkout@v4.1.0
  #   - run: echo "Release to GitLab..."
  #   - uses: softprops/action-gh-release@v0.1.15
  #     with:
  #       tag_name: "${{ github.ref }}"
  #       name: Release ${{ github.ref }}
  #       body: Omnibus Release ${{ github.ref }}
