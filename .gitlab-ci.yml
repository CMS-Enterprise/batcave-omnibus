workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: always

stages:
  - build
  - test
  - release

variables:
  TEMPLATE_VERSION: "main"
  FETCH_SAST_ARTIFACTS: "false"

# delivery-pipeline
#
# build the omnibus image with commit tag.
# will only run when it's NOT a commit tag branch
delivery-pipeline:
  stage: build
  variables:
    PUSH_LATEST: "true"
  trigger:
    strategy: depend
    include:
      - project: "devops-pipelines/pipeline-triggers"
        ref: ${TEMPLATE_VERSION}
        file: "delivery.yaml"
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

# release-pipeline
#
# create a release when there is a git tag pushed to this repo
release-pipeline:
  stage: release
  trigger:
    strategy: depend
    include:
      - project: "devops-pipelines/pipeline-triggers"
        ref: ${TEMPLATE_VERSION}
        file: "release.yaml"
  rules:
    - if: $CI_COMMIT_TAG

# release-gitlab
#
# creates a release package for GitLab UI
release-gitlab:
  stage: release
  image: artifactory.cloud.cms.gov/batcave-docker/devops-pipelines/pipeline-tools/omnibus:v1.0.0-rc.10
  script:
    - echo "Release to GitLab..."
  rules:
    - if: $CI_COMMIT_TAG
  release:
    tag_name: $CI_COMMIT_TAG
    name: "Release $CI_COMMIT_TAG"
    description: "Omnibus Release $CI_COMMIT_TAG"

# The following jobs are for testing the currently built image

.with-current-image:
  stage: test
  image: ${APP_IMAGE}
  needs: ["delivery-pipeline"]
  variables:
    APP_IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}
    APP_IMAGE_SRC: ${BC_IMAGE_REPO}/${CI_PROJECT_PATH}
    APP_IMAGE: ${APP_IMAGE_SRC}:${APP_IMAGE_TAG}
    ARTIFACT_FOLDER: ".artifacts"
    GITLEAKS_REPORT: ${ARTIFACT_FOLDER}/gitleaks/gitleaks_report.json
    IMAGE_SBOM: ${ARTIFACT_FOLDER}/sbom/sbom.json
    COSIGN_EXPERIMENTAL: 1
  before_script:
    - mkdir ~/.docker && echo $BC_ARTIFACTORY_AUTH_JSON >> ~/.docker/config.json
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

grype:
  extends: .with-current-image
  variables:
    GRYPE_CACHE_IMAGE: "${BC_IMAGE_REPO}/devops-pipelines/cache/grype/vulndb:latest"
  script:
    - oras pull ${GRYPE_CACHE_IMAGE}
    - grype db import vulndb.tar.gz
    - grype db check
    - grype artifactory.cloud.cms.gov/docker/bkimminich/juice-shop -o json --file report.json
    - cat report.json | jq .

syft:
  extends: .with-current-image
  script:
    - syft version
    - syft artifactory.cloud.cms.gov/docker/bkimminich/juice-shop --scope=squashed -o json --file ${IMAGE_SBOM}
    - cat ${IMAGE_SBOM}

gitleaks:
  extends: .with-current-image
  script:
    - git config --global --add safe.directory '*'
    - git clone https://github.com/juice-shop/juice-shop.git
    - mkdir -p $ARTIFACT_FOLDER/gitleaks
    - touch ${GITLEAKS_REPORT}
    - echo "Starting Gitleaks Secrets Scan"
    - gitleaks detect --exit-code 0 --verbose --source juice-shop --report-format json --report-path ${GITLEAKS_REPORT}

cosign-crane:
  extends: .with-current-image
  script:
    - cosign version
    - crane version
    - export TARGET_IMAGE=$(crane digest --full-ref ${APP_IMAGE})
    - echo "Application Image Digest -> ${TARGET_IMAGE}"
    - echo "Signing image using cosign with OIDC token"
    - cosign sign --identity-token=$(cat /var/run/secrets/eks.amazonaws.com/serviceaccount/token) ${TARGET_IMAGE}

gatecheck:
  extends: .with-current-image
  script:
    - gatecheck version
    - gatecheck config info

s3upload:
  extends: .with-current-image
  variables:
    AWS_PROFILE: ${BC_AWS_PROFILE_PROD}
    AWS_BUCKET: ${BC_AWS_SECURITY_SCANS_STORAGE_BUCKET_PROD}
    PRODUCT: ${CI_PROJECT_NAME}
    ENGAGEMENT: "${CI_PROJECT_NAME}_pipeline_${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}"
  script:
    - export PRODUCT_TYPE=$(basename ${CI_PROJECT_NAMESPACE})
    - export EXPORT_DATE=$(date -u +"%Y%m%d")
    - export S3_KEY=${EXPORT_DATE}/${PRODUCT_TYPE}/${PRODUCT}/${ENGAGEMENT}
    - echo "Omnibus Smoke Test - Ignore" > file-1.txt
    - ls -la
    - s3upload -f file-1.txt -b ${AWS_BUCKET} -k ${S3_KEY}

oras:
  extends: .with-current-image
  variables:
    ARTIFACT_TYPE: "application/vnd.cms.batcave.smoke-test+text"
    SMOKE_TEST_IMAGE: "${BC_IMAGE_REPO}/devops-pipelines/cache/omnibus/smoke-test:latest"
  script:
    - date > omnibus-smoke-test.txt
    - cat omnibus-smoke-test.txt
    - oras push -v --artifact-type ${ARTIFACT_TYPE} ${SMOKE_TEST_IMAGE} omnibus-smoke-test.txt
    - rm omnibus-smoke-test.txt
    - ls -lah
    - oras pull -v ${SMOKE_TEST_IMAGE}
    - cat omnibus-smoke-test.txt

workflow-engine:
  extends: .with-current-image
  variables:
    WFE_BUILD_DIR: "."
    WFE_BUILD_DOCKERFILE: "Dockerfile"
    WFE_BUILD_TAG: "latest"
    WFE_BUILD_PLATFORM: "linux/amd64"
    WFE_BUILD_TARGET: "build"
    WFE_BUILD_CACHE_TO: ""
    WFE_BUILD_CACHE_FROM: ""
    WFE_BUILD_SQUASH_LAYERS: "false"
    WFE_SCAN_IMAGE_TARGET: ""
    WFE_ARTIFACT_DIRECTORY: ".artifacts"
    WFE_SBOM_FILENAME: "sbom.json"
    WFE_GRYPE_FILENAME: "grype.json"
  script:
    - echo "Workflow Engine Smoke Test"
    - workflow-engine run debug

release-tool:
  extends: .with-current-image
  script:
    - release-cli help
